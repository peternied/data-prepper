properties([
  parameters([
    string(
        name: 'DistManifestUrl',
        description: 'The url to distribution manifest for this release')])
])

lib = library(
    identifier: 'jenkins@uni-poc',
    retriever:modernSCM(
        [$class: 'GitSCMSource',
        remote: 'https://github.com/peternied/opensearch-build.git',
        traits: [gitBranchDiscovery()]
        ])
    )

standardReleasePipeline {
    def distManifest = new FakeDistManifest(fakeYmlFromUrl(params.DistManifestUrl))

    def downloadPath = fakeDownloadArtifacts(distManifest)

    // Signing workflow
    signArtifacts(
        artifactsPath: downloadPath,
        signatureType: '.sig',
        distributionPlatform: 'linux',
    )
    
    // Replace with publishToMaven(...)
    fakeWithCredentials([usernamePassword(credentialsId: 'Sonatype', usernameVariable: 'SONATYPE_USERNAME', passwordVariable: 'SONATYPE_PASSWORD')]) {
        sh('$WORKSPACE/publish/publish-snapshot.sh $WORKSPACE/dist/${distManifest.product}/maven')
    }

    // Replace with publishToArtifactRepositry(...)
    fakeWithAWS(role: "${ARTIFACT_PROMOTION_ROLE_NAME}", roleAccount: "${AWS_ACCOUNT_ARTIFACT}", duration: 900, roleSessionName: 'jenkins-session') {
        s3Upload(file: 'distribution/', bucket: "${ARTIFACT_PRODUCTION_BUCKET_NAME}", path: "${distManifest.product}/${distManifest.version}/")
    }

    fakeCopyDockerImage(
        sourceImagePath: distManifest.artifacts.containerReference,
        destinationImagePath: "opensearchproject/${distManifest.product}:${distManifest.version}",
        destinationType: "docker",
        destinationCredentialIdentifier: "jenkins-staging-docker-prod-token"
    )
}

class FakeDistManifest implements Serializable {
    // Additional contents need to be added to the dist manifest for
    // these parameters
    class Artifacts implements Serializable {
        String containerReference
        Artifacts(Map data) {
            this.containerReference = data?.containerReference
        }
    }

    Artifacts artifacts
    String product
    String version
    FakeDistManifest(Map data) {
        println "new DisManifest: ${data}"
        this.artifacts = new Artifacts(data?.artifacts)
        this.product = data?.product
        this.version = data?.product
    }
}

Map fakeYmlFromUrl(String url) {
    echo "ymlFromUrl: ${url}"
    return [:]
}

def fakeDownloadArtifacts(FakeDistManifest manifest) {
    echo "fakeDownloadArtifacts"

}

def fakeSignArtifacts(Map args) {
    echo "fakeDownloadArtifacts ${args}"
}

def fakeWithCredentials(Map args, Closure closure) {
    echo "fakeWithCredentials, not running inner closure"
}

def fakeWithAWS(Map args, Closure closure) {
    echo "fakeWithAWS, not running inner closure"
}

def fakeCopyDockerImage(Map args) {
    echo "fakeCopyDockerImage ${args}"
}